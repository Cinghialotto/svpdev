00000000                            ;**************************************************************
00000000                            ; SVP Basic GFX Sample
00000000                            ;**************************************************************
00000000                            ; by Javi Taiyou
00000000                            ;**************************************************************
00000000                            ; The goal of this sample is to offer an example of how to:
00000000                            ;
00000000                            ; 1) Handle communications between the Mega Drive/Genesis and the SVP chip.
00000000                            ; 2) Have the Mega Drive/Genesis side to request the SVP to perform operations.
00000000                            ; 3) How to generate simple graphical data from SVP to create a small framebuffer.
00000000                            ; 4) How to request graphical data from the SVP so that can drawn by the VDP.
00000000                            ;
00000000                            ; You can assemble the M68000 part of this sample with `SNASM68K.EXE`:
00000000                            ;
00000000                            ;    SNASM68K.EXE /p main.asm,output.map,output.lst,output.bin
00000000                            ;
00000000                            ; main.asm = this source file
00000000                            ; output.bin = Mega Drive/Genesis part of this ROM, to be later used by the SSP16xx (SVP) assembler.
00000000                            ; output.lst = listing file, shows assembled addresses alongside your source code (useful for debugging).
00000000                            ; output.map = symbol map file for linking (unused)
00000000                            ;
00000000                            ; The M68000 part of the binary needs to be later fed up to the SSP16xx assembler to build
00000000                            ; the SVP part of the code on top of it. You can download it from: 
00000000                            ;
00000000                            ; https://github.com/jdesiloniz/svpdev/tools/ssp16asm
00000000                            ;
00000000                            ; To assemble the SVP part and generate the final ROM:
00000000                            ;
00000000                            ; ssp16asm -b output.bin svp_gfx.svp rom_svp.bin
00000000                            ;
00000000                            ; svp_gfx.svp = source containing the SVP part of this sample.
00000000                            ; output.bin = M68000 binary file.
00000000                            ; rom_svp.bin = final ROM containing both M68000 and SSP16xx code to be run on hardware
00000000                            ; 				or emulators that support SVP emulation!
00000000                            ;
00000000                            
00000000                            ;**************************************************************
00000000                            ; ACKNOWLEDGEMENT
00000000                            ;**************************************************************
00000000                            ;
00000000                            ; Many parts in the M68000 side of this sample are based on the work of other developers in 
00000000                            ; the Mega Drive/Genesis scene, specially the following samples by Matt Phillips/BigEvilCorporation:
00000000                            ;
00000000                            ; https://github.com/BigEvilCorporation/megadrive_samples/
00000000                            ;
00000000                            ; The amazing technical documentation found in the Plutiedev site were a big help too: https://plutiedev.com/
00000000                            ; 
00000000                            ; Finally the reverse engineering on the SVP originally made by Tasco Deluxe and Grazvydas Ignotas (notaz),
00000000                            ; which obviously helped a lot for the development of the SSP16xx assembler, and the understanding of its behavior.
00000000                            
00000000                            ;**************************************************************
00000000                            ; INCLUDES
00000000                            ;**************************************************************
00000000                            ; Constants + routines.
00000000                            ; Warning: this section shouldn't ever exceed 0x800 bytes
00000000                            ; SVP will try to access 0x800 as its own entry point, so ROM
00000000                            ; space between 0x800-0x1FFFF should be left out for SVP code.
00000000                            ;**************************************************************
00000000                            
00000000                            	include 'init.asm'			; ROM header and initialization routines
00000000                            ; A label defining the start of ROM so we can compute the total size.
00000000                            ROM_Start:
00000000                            
00000000                            ;**************************************************************
00000000                            ; CPU VECTOR TABLE
00000000                            ;**************************************************************
00000000                            ; A table of addresses that the CPU needs to know about -
00000000                            ; things like stack address, "main()" function address,
00000000                            ; vertical/horizontal interrupt addresses, etc.
00000000                            ;**************************************************************
00000000                            ; For any interrupts we don't want to handle in this demo,
00000000                            ; we specify INT_Null (an interrupt at the bottom of the
00000000                            ; file that doesn't do anything).
00000000                            ;**************************************************************
00000000                            ; This must be the very first thing in the ROM, since the CPU
00000000                            ; reads it from 0x0000 on bootup.
00000000                            ;**************************************************************
00000000 00FF E000                  	dc.l   0x00FFE000			; Initial stack pointer value
00000004 0000 0000                  	dc.l   CPU_EntryPoint		; Start of program
00000008 0000 0000                  	dc.l   CPU_Exception 		; Bus error
0000000C 0000 0000                  	dc.l   CPU_Exception 		; Address error
00000010 0000 0000                  	dc.l   CPU_Exception 		; Illegal instruction
00000014 0000 0000                  	dc.l   CPU_Exception 		; Division by zero
00000018 0000 0000                  	dc.l   CPU_Exception 		; CHK CPU_Exception
0000001C 0000 0000                  	dc.l   CPU_Exception 		; TRAPV CPU_Exception
00000020 0000 0000                  	dc.l   CPU_Exception 		; Privilege violation
00000024 0000 0000                  	dc.l   INT_Null				; TRACE exception
00000028 0000 0000                  	dc.l   INT_Null				; Line-A emulator
0000002C 0000 0000                  	dc.l   INT_Null				; Line-F emulator
00000030 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
00000034 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
00000038 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
0000003C 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
00000040 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
00000044 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
00000048 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
0000004C 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
00000050 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
00000054 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
00000058 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
0000005C 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
00000060 0000 0000                  	dc.l   INT_Null				; Spurious exception
00000064 0000 0000                  	dc.l   INT_Null				; IRQ level 1
00000068 0000 0000                  	dc.l   INT_Null				; IRQ level 2
0000006C 0000 0000                  	dc.l   INT_Null				; IRQ level 3
00000070 0000 0000                  	dc.l   INT_HInterrupt		; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  	dc.l   INT_Null  			; IRQ level 5
00000078 0000 0000                  	dc.l   INT_VInterrupt		; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  	dc.l   INT_Null				; IRQ level 7
00000080 0000 0000                  	dc.l   INT_Null				; TRAP #00 exception
00000084 0000 0000                  	dc.l   INT_Null				; TRAP #01 exception
00000088 0000 0000                  	dc.l   INT_Null				; TRAP #02 exception
0000008C 0000 0000                  	dc.l   INT_Null				; TRAP #03 exception
00000090 0000 0000                  	dc.l   INT_Null				; TRAP #04 exception
00000094 0000 0000                  	dc.l   INT_Null				; TRAP #05 exception
00000098 0000 0000                  	dc.l   INT_Null				; TRAP #06 exception
0000009C 0000 0000                  	dc.l   INT_Null				; TRAP #07 exception
000000A0 0000 0000                  	dc.l   INT_Null				; TRAP #08 exception
000000A4 0000 0000                  	dc.l   INT_Null				; TRAP #09 exception
000000A8 0000 0000                  	dc.l   INT_Null				; TRAP #10 exception
000000AC 0000 0000                  	dc.l   INT_Null				; TRAP #11 exception
000000B0 0000 0000                  	dc.l   INT_Null				; TRAP #12 exception
000000B4 0000 0000                  	dc.l   INT_Null				; TRAP #13 exception
000000B8 0000 0000                  	dc.l   INT_Null				; TRAP #14 exception
000000BC 0000 0000                  	dc.l   INT_Null				; TRAP #15 exception
000000C0 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000C4 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000C8 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000CC 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000D0 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000D4 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000D8 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000DC 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000E0 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000E4 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000E8 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000EC 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000F0 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000F4 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000F8 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
000000FC 0000 0000                  	dc.l   INT_Null				; Unused (reserved)
00000100                            	
00000100                            ;**********************************************************************
00000100                            ; SEGA MEGA DRIVE ROM HEADER
00000100                            ;**********************************************************************
00000100                            ; A structure that specifies some metadata about the ROM, like
00000100                            ; its name, author, version number, release date, region,
00000100                            ; and any special peripherals used.
00000100                            ; Note that the Mega Drive console itself doesn't read any of
00000100                            ; this, it's more a convenience for the programmer, but
00000100                            ; most emulators will read the title and region.
00000100                            ;**********************************************************************
00000100                            ; If your emulator doesn't show the correct ROM name, then this
00000100                            ; table is in the wrong place or in the wrong format.
00000100                            ;**********************************************************************
00000100                            ; It's not required for execution on hardware (still unconfirmed),
00000100                            ; but emulators that support SVP emulation use part of these fields
00000100                            ; to detect Virtua Racing and thus start the emulated DSP:
00000100                            ;
00000100                            ; - MiSTer relies on the the Version number field to be GM MK-1229
00000100                            ; - KEGA uses the notes field, originally in Shift-JIS.
00000100                            ;
00000100                            ; If you want emulators to support this ROM, please don't change these
00000100                            ; (unless these are updated to give developers the option to enable 
00000100                            ; SVP support manually.)
00000100                            ;
00000100                            ;**********************************************************************
00000100 5345 4741 204D 4547 4120+  	dc.b "SEGA MEGA DRIVE "                                 ; Console name
00000110 4A61 7669 2054 6169 796F+  	dc.b "Javi Taiyou     "                                 ; Copyright holder and release date
00000120 5356 5020 4452 4157 2054+  	dc.b "SVP DRAW TEST                                   " ; Domestic name
00000150 5356 5020 4452 4157 2054+  	dc.b "SVP DRAW TEST                                   " ; International name
00000180 474D 204D 4B2D 3132 3239+  	dc.b "GM MK-1229 -00"                                   ; Version number - need to use the original from Virtua Racing for compatibility with MiSTer
0000018E 0000                       	dc.w 0x0000                                             ; Checksum
00000190 4A20 2020 2020 2020 2020+  	dc.b "J               "                                 ; I/O support
000001A0 0000 0000                  	dc.l ROM_Start                                          ; Start address of ROM
000001A4 0000 0000                  	dc.l ROM_End-1                                          ; End address of ROM
000001A8 00FF 0000                  	dc.l 0x00FF0000                                         ; Start address of RAM
000001AC 00FF FFFF                  	dc.l 0x00FF0000+0x0000FFFF                              ; End address of RAM
000001B0 0000 0000                  	dc.l 0x00000000                                         ; SRAM enabled
000001B4 0000 0000                  	dc.l 0x00000000                                         ; Unused
000001B8 0000 0000                  	dc.l 0x00000000                                         ; Start address of SRAM
000001BC 0000 0000                  	dc.l 0x00000000                                         ; End address of SRAM
000001C0 0000 0000                  	dc.l 0x00000000                                         ; Unused
000001C4 0000 0000                  	dc.l 0x00000000                                         ; Unused
000001C8 5356 0000                  	dc.l 0x53560000											; Security check to pass SVP boot-up process
000001CC 2000                       	dc.w 0x2000
000001CE 0400                       	dc.w 0x0400												; Code entry point at 0400
000001D0 2020 2020                  	dc.l 0x20202020
000001D4 2020 2020                  	dc.l 0x20202020
000001D8 2020 2020                  	dc.l 0x20202020
000001DC 2020 2020                  	dc.l 0x20202020
000001E0 2020 2020                  	dc.l 0x20202020
000001E4 2020 2020                  	dc.l 0x20202020
000001E8 2020 2020                  	dc.l 0x20202020
000001EC 2020 2020                  	dc.l 0x20202020
000001F0 2020 4520 2020 2020 2020+  	dc.b "  E             "                                 ; Country codes
000001F0 2020 4520 2020 2020 2020+  	dc.b "  E             "                                 ; Country codes
00000200                            	include 'macros.asm'		; VDP macros
00000200                            ;**************************************************************
00000200                            ; VRAM WRITE MACROS
00000200                            ;**************************************************************
00000200                            ; Some utility macros to help generate addresses and commands for
00000200                            ; writing data to video memory, since they're tricky (and
00000200                            ; error prone) to calculate manually.
00000200                            ; The resulting command and address is written to the VDP's
00000200                            ; control port, ready to accept data in the data port.
00000200                            ;**************************************************************
00000200                            	
00000200                            ; Set the VRAM (video RAM) address to write to next
00000200                            SetVRAMWrite: macro addr
00000200                            	move.l  #(vdp_cmd_vram_write)|((\addr)&$3FFF)<<16|(\addr)>>14, vdp_control
00000200                            	endm
00000200                            	
00000200                            ; Set the CRAM (colour RAM) address to write to next
00000200                            SetCRAMWrite: macro addr
00000200                            	move.l  #(vdp_cmd_cram_write)|((\addr)&$3FFF)<<16|(\addr)>>14, vdp_control
00000200                            	endm
00000200                            
00000200                            ; Set the VSRAM (vertical scroll RAM) address to write to next
00000200                            SetVSRAMWrite: macro addr
00000200                            	move.l  #(vdp_cmd_vsram_write)|((\addr)&$3FFF)<<16|(\addr)>>14, vdp_control
00000200                            	endm
00000200                            
00000200                            SetXramAddrReg: macro reg, cmd
00000200                                and.l   #$FFFF, \reg
00000200                                lsl.l   #2, \reg
00000200                                lsr.w   #2, \reg
00000200                                swap    \reg
00000200                                or.l    #\cmd, \reg
00000200                                move.l  \reg, (vdp_control)
00000200                                endm
00000200                            
00000200                            SetVramAddrReg: macro reg
00000200                                SetXramAddrReg \reg, vdp_cmd_vram_write
00000200                                endm
00000200                            
00000200                            SetCramAddrReg: macro reg
00000200                                SetXramAddrReg \reg, vdp_cmd_cram_write
00000200                                endm
00000200                            
00000200                            SetVsramAddrReg: macro reg
00000200                                SetXramAddrReg \reg, vdp_cmd_vsram_write
00000200                                endm
00000200                                endm
00000200                            
00000200                            ;**************************************************************
00000200                            ; MEMORY MANAGEMENT
00000200                            ;**************************************************************
00000200                            	RSSET 0x00FF0000			; Start a new offset table from beginning of RAM
00000200 =00FF0000                  ram_current_color		rs.w 1	; 1 table entry of current color to be displayed in the frame buffer
00000200                            
00000200                            ;**************************************************************
00000200                            ; SVP CODE PADDING
00000200                            ;**************************************************************
00000200                            ; SVP will start looking for code at address 0x800, let's leave
00000200                            ; space until address 0x20000 (as Virtua Racing did) so that
00000200                            ; we can later put SSP1601 code in the following blanks:
00000200                            ;***************************************************************
00000200                            SVP_PaddingStart:
00000200                            
00000200                            	DCB.b 0x20000-SVP_PaddingStart,0x00
00020000                            
00020000                            ;**************************************************************
00020000                            ; CODE ENTRY POINT
00020000                            ;**************************************************************
00020000                            ; The "main()" function. Your code starts here. Once the CPU
00020000                            ; has finished initialising, it will jump to this entry point
00020000                            ; (specified in the vector table at the top of the file).
00020000                            ;
00020000                            ; This should usually be address 0x20000, right after the space
00020000                            ; reserved for SVP code inside the ROM.
00020000                            ;**************************************************************
00020000                            CPU_EntryPoint:
00020000                            
00020000                            	;***************************
00020000                            	; Initialise the Mega Drive
00020000                            	;***************************
00020000                            	; Write the TMSS signature (if a model 1+ Mega Drive)
00020000 4EB9 0000 0000             	jsr    	VDP_WriteTMSS
00020006                            
00020006                            	; Load the initial VDP registers and clear VRAM memory
00020006 4EB9 0000 0000             	jsr    	VDP_LoadRegisters
0002000C 4EB9 0000 0000             	jsr 	VDP_ClearVRAM
00020012 4EB9 0000 0000             	jsr 	VDP_ClearCRAM
00020018                            	
00020018                            	;********************************************
00020018                            	; Write font tiles to VRAM for printing text
00020018                            	;********************************************
00020018                            	; Setup the VDP to write to VRAM address 0x0000 (the address of the first graphics tile, index 0)
00020018 23FC 0000 0000 0000 0000   	SetVRAMWrite vram_addr_tiles
00020022                            	
00020022                            	; Write the font glyph tiles to VRAM
00020022 41F9 0000 0000             	lea PixelFont, a0
00020028 303C 0000                  	move.w #(text_tile_count*size_tile_l)-1, d0		; Loop counter = 8 longwords per tile * num tiles (-1 for DBRA loop)
0002002C                            	@CharLp:										; Start of loop
0002002C 23D8 0000 0000             	move.l (a0)+, vdp_data							; Write tile line (4 bytes per line), and post-increment address
00020032 51C8 FFF8                  	dbra d0, @CharLp								; Decrement d0 and loop until finished (when d0 reaches -1)
00020036                            	
00020036                            	;*****************************************************************************************************
00020036                            	; Write tilemap for plane B to hold the tiles generated in SVP 
00020036                            	;*****************************************************************************************************
00020036                            	; SVP will be generating tile data for us, but we need a tilemap in VRAM so that the VDP knows
00020036                            	; which tiles to draw on the screen. This call generates a set of sequential tile indices
00020036                            	; (starting from index 0x50) to create a framebuffer of 8x8 tiles to be filled by SVP graphical data.
00020036                            	;*****************************************************************************************************
00020036 41F9 0000 0000             	lea vram_addr_plane_b, a0
0002003C 303C 0050                  	move.w #0x50, d0	; offset for data in tileset (after font tiles)
00020040 4EB9 0000 0000             	jsr PrepareTilemapForSVP
00020046                            
00020046                            	;***************************
00020046                            	; Draw main title in screen
00020046                            	;***************************
00020046 23FC 0000 0000 0000 0000   	SetVRAMWrite vram_addr_plane_a+((((text_pos_y_title)*vdp_plane_width)+text_pos_x_title)*size_word)
00020050 41F9 0000 0000             	lea StringTitle, a0			; address for string
00020056 4EB9 0000 0000             	jsr DrawText
0002005C                            
0002005C                            	; *************************************************************************************************
0002005C                            	; Prepare parameters for SVP operation
0002005C                            	; *************************************************************************************************
0002005C                            	; During the execution of this sample, the Mega Drive/Genesis will be sending a command to the SVP
0002005C                            	; to create a set of a tiles of an specific color (one different each frame). `d0` register will
0002005C                            	; hold the color number (as its index in the palette contained in CRAM). We also store the current
0002005C                            	; color index in RAM.
0002005C                            	; *************************************************************************************************
0002005C 4280                       	clr.l d0
0002005E 0640 0001                  	addi #1, d0
00020062 33C0 00FF 0000             	move.w d0, ram_current_color		; initialize ram value for current color
00020068                            
00020068                            	; *******************************************
00020068                            	; Request SVP for the first set of tile data
00020068                            	; *******************************************
00020068 4EB9 0000 0000             	jsr AskSVPForTileData
0002006E                            
0002006E 4EB9 0000 0000             	jsr VDP_InitStatusRegister	; init interrupts
00020074                            
00020074                            	@Stop:
00020074 6000 FFFE                  	bra @stop
00020078                            
00020078                            	; Finished!
00020078                            	
00020078                            ; ********************************************************************************************
00020078                            ; INTERRUPT ROUTINES
00020078                            ; ********************************************************************************************
00020078                            ; The interrupt routines, as specified in the vector table at the top of the file.
00020078                            ; Note that we use `rte` to return from an interrupt, not `rts` like a subroutine.
00020078                            ; ********************************************************************************************
00020078                            
00020078                            ; Vertical interrupt - run once per frame (50hz in PAL, 60hz in NTSC)
00020078                            ; Main communications with the SVP happen during this part of the code:
00020078                            ;
00020078                            ; 1) By this point, the SVP should have our tiles generated and stored in the external DRAM
00020078                            ;    available in the game cartridge. We need to bring these tiles to the VRAM using DMA so
00020078                            ;    that the VDP can display them during the next frame.
00020078                            ; 
00020078                            ; 2) Update the color to be drawn the following frame and submit it to the SVP so that it can
00020078                            ; 	 start generating the next tiles.
00020078                            ;
00020078                            ; ********************************************************************************************
00020078                            INT_VInterrupt:
00020078                            	; Prepare required data for the DMA transfer.
00020078                            	; Source - tile data in DRAM: 0x301000.
00020078                            	; Destination - tile graphic space in VRAM: 0x0A00 (from tile index 0x50).
00020078                            	; Size: 0x1000 (4096 bytes).
00020078                            
00020078 4280                       	clr.l d0
0002007A 4286                       	clr.l d6
0002007C 4287                       	clr.l d7
0002007E 41F9 0000 0000             	lea vdp_control, a0
00020084 303C 0000                  	move.w 	#dramTilesSize, d0
00020088 E248                       	lsr.w   #1, d0
0002008A                                
0002008A 2E3C 0000 0000                 move.l 	#dramTilesOrigin, d7
00020090 E28F                           lsr.l   #1, d7
00020092 0287 007F FFFF                 and.l   #0x7FFFFF, d7
00020098                            
00020098 3C3C 0000                  	move.w  #vdpreg_dmalen_l, d6
0002009C 1C00                           move.b  d0, d6
0002009E 3086                           move.w  d6, (a0)				; writing DMA_LENGTH low byte command
000200A0                                
000200A0 E048                           lsr.w   #8, d0					; getting high byte
000200A2 3C3C 0000                      move.w  #vdpreg_dmalen_h, d6
000200A6 1C00                           move.b  d0, d6
000200A8 3086                           move.w  d6, (a0)				; writing DMA_LENGTH high byte command
000200AA                            
000200AA 3C3C 0000                  	move.w  #vdpreg_dmasrc_l, d6
000200AE 1C07                           move.b  d7, d6
000200B0 3086                           move.w  d6, (a0)				; writing DMA_SOURCE low byte command
000200B2                                
000200B2 E08F                           lsr.l   #8, d7
000200B4 3C3C 0000                      move.w  #vdpreg_dmasrc_m, d6
000200B8 1C07                           move.b  d7, d6
000200BA 3086                           move.w  d6, (a0)				; writing DMA_SOURCE middle byte command
000200BC                                
000200BC E08F                           lsr.l   #8, d7
000200BE 3C3C 0000                      move.w  #vdpreg_dmasrc_h, d6
000200C2 1C07                           move.b  d7, d6
000200C4 3086                           move.w  d6, (a0)				; writing DMA_SOURCE low byte command
000200C6                            
000200C6                            	; Calculate destination address format
000200C6 223C 0000 0000             	move.l 	#vramTilesDestination, d1
000200CC 0281 0000 FFFF             	and.l   #0xFFFF, d1
000200D2 E589                           lsl.l   #2, d1
000200D4 E449                           lsr.w   #2, d1
000200D6 4841                           swap    d1
000200D8 0081 0000 0000                 or.l    #vram_dma_cmd, d1
000200DE                            
000200DE 2081                       	move.l d1, (a0)					; perform actual transfer
000200E0                            
000200E0                            	; Tile data should be at VRAM at this point, generate a new color and
000200E0                            	; submit it to the SVP so that it can generate more tiles:
000200E0 4280                       	clr.l d0
000200E2 3039 00FF 0000             	move.w ram_current_color, d0
000200E8 0600 0001                  	add.b #1, d0
000200EC 0240 000F                  	and.w #0x000F, d0
000200F0 33C0 00FF 0000             	move.w d0, ram_current_color
000200F6 4EB9 0000 0000             	jsr AskSVPForTileData
000200FC                            
000200FC                            	; Write debug data on screen:
000200FC                            	; show value of XST
000200FC 3839 0000 0000             	move.w regXST, d4
00020102 23FC 0000 0000 0000 0000   	SetVRAMWrite vram_addr_plane_a+((((text_pos_y_xst)*vdp_plane_width)+text_pos_x_xst)*size_word)
0002010C 4EB9 0000 0000             	jsr DrawNumber
00020112                            	
00020112                            	; show value of XST_state:
00020112 23FC 0000 0000 0000 0000   	SetVRAMWrite vram_addr_plane_a+((((text_pos_y_xst_state)*vdp_plane_width)+text_pos_x_xst_state)*size_word)
0002011C 3839 0000 0000             	move.w  regXSTState, d4
00020122 4EB9 0000 0000             	jsr DrawNumber
00020128                            
00020128 4E73                       	rte
0002012A                            
0002012A                            ; Horizontal interrupt - run once per N scanlines (N = specified in VDP register 0xA)
0002012A                            INT_HInterrupt:
0002012A                            	; Doesn't do anything in this sample
0002012A 4E73                       	rte
0002012C                            
0002012C                            ; NULL interrupt - for interrupts we don't care about
0002012C                            INT_Null:
0002012C 4E73                       	rte
0002012E                            
0002012E                            ; Exception interrupt - called if an error has occured
0002012E                            CPU_Exception:
0002012E                            	; Print "EXC" and try to go back:
0002012E 23FC 0000 0000 0000 0000   	SetVRAMWrite vram_addr_plane_a+((((text_pos_y_exc)*vdp_plane_width)+text_pos_x_exc)*size_word)
00020138 41F9 0000 0000             	lea StringException, a0			; address for string
0002013E 4EB9 0000 0000             	jsr DrawText
00020144                            
00020144 4E73                       	rte
00020146                            	
00020146                            ;******************************
00020146                            ; Strings and Text coordinates
00020146                            ;******************************
00020146                            StringTitle:
00020146 5356 5020 4452 4157 2054+  	dc.b "SVP DRAW TEST",0
00020154                            StringException:
00020154 4558 4300                  	dc.b "EXC", 0
00020158                            
00020158                            ; Text draw position (in tiles)
00020158 =00000001                  text_pos_y_title			equ 0x01
00020158 =0000000D                  text_pos_x_title			equ 0x0D
00020158 =00000018                  text_pos_y_xst				equ 0x18
00020158 =00000002                  text_pos_x_xst				equ 0x02
00020158 =00000019                  text_pos_y_xst_state		equ 0x19
00020158 =00000002                  text_pos_x_xst_state		equ 0x02
00020158 =0000001A                  text_pos_y_dram_init		equ 0x1A
00020158 =00000002                  text_pos_x_dram_init		equ 0x02
00020158 =00000000                  text_pos_y_exc				equ 0x00
00020158 =00000000                  text_pos_x_exc				equ 0x00
00020158                            
00020158                            	include 'constants.asm'		; Constants
00020158                            ;***********
00020158                            ; CONSTANTS
00020158                            ;***********
00020158                            ; Defines names for commonly used values and addresses to make
00020158                            ; the code more readable.
00020158                            ;**************************************************************
00020158                            
00020158                            ;*****************************
00020158                            ; INITIAL VDP REGISTER VALUES
00020158                            ;*****************************
00020158                            ; 24 register values to be copied to the VDP during initialisation.
00020158                            ; These specify things like initial width/height of the planes,
00020158                            ; addresses within VRAM to find scroll/sprite data, the
00020158                            ; background palette/colour index, whether or not the display
00020158                            ; is on, and clears initial values for things like DMA.
00020158                            ;==============================================================
00020158                            VDPRegisters:
00020158 14                         	dc.b 0x14 ; 0x00:  H interrupt on, palettes on
00020159 74                         	dc.b 0x74 ; 0x01:  V interrupt on, display on, DMA on, Genesis mode on
0002015A 30                         	dc.b 0x30 ; 0x02:  Pattern table for Scroll Plane A at VRAM 0xC000 (bits 3-5 = bits 13-15)
0002015B 00                         	dc.b 0x00 ; 0x03:  Pattern table for Window Plane at VRAM 0x0000 (disabled) (bits 1-5 = bits 11-15)
0002015C 07                         	dc.b 0x07 ; 0x04:  Pattern table for Scroll Plane B at VRAM 0xE000 (bits 0-2 = bits 11-15)
0002015D 78                         	dc.b 0x78 ; 0x05:  Sprite table at VRAM 0xF000 (bits 0-6 = bits 9-15)
0002015E 00                         	dc.b 0x00 ; 0x06:  Unused
0002015F 00                         	dc.b 0x00 ; 0x07:  Background colour: bits 0-3 = colour, bits 4-5 = palette
00020160 00                         	dc.b 0x00 ; 0x08:  Unused
00020161 00                         	dc.b 0x00 ; 0x09:  Unused
00020162 08                         	dc.b 0x08 ; 0x0A: Frequency of Horiz. interrupt in Rasters (number of lines travelled by the beam)
00020163 00                         	dc.b 0x00 ; 0x0B: External interrupts off, V scroll per-page, H scroll per-page
00020164 81                         	dc.b 0x81 ; 0x0C: Shadows and highlights off, interlace off, H40 mode (320 x 224 screen res)
00020165 3F                         	dc.b 0x3F ; 0x0D: Horiz. scroll table at VRAM 0xFC00 (bits 0-5)
00020166 00                         	dc.b 0x00 ; 0x0E: Unused
00020167 02                         	dc.b 0x02 ; 0x0F: Autoincrement 2 bytes
00020168 01                         	dc.b 0x01 ; 0x10: Scroll plane size: 64x32 tiles
00020169 00                         	dc.b 0x00 ; 0x11: Window Plane X pos 0 left (pos in bits 0-4, left/right in bit 7)
0002016A 00                         	dc.b 0x00 ; 0x12: Window Plane Y pos 0 up (pos in bits 0-4, up/down in bit 7)
0002016B FF                         	dc.b 0xFF ; 0x13: DMA length lo byte
0002016C FF                         	dc.b 0xFF ; 0x14: DMA length hi byte
0002016D 00                         	dc.b 0x00 ; 0x15: DMA source address lo byte
0002016E 00                         	dc.b 0x00 ; 0x16: DMA source address mid byte
0002016F 80                         	dc.b 0x80 ; 0x17: DMA source address hi byte, memory-to-VRAM mode (bits 6-7)
00020170                            	
00020170                            	even
00020170                            
00020170                            ; VDP port addresses
00020170 =00C00004                  vdp_control				equ 0x00C00004
00020170 =00C00000                  vdp_data				equ 0x00C00000
00020170                            
00020170                            ; VDP commands
00020170 =40000000                  vdp_cmd_vram_write		equ 0x40000000
00020170 =C0000000                  vdp_cmd_cram_write		equ 0xC0000000
00020170 =40000010                  vdp_cmd_vsram_write		equ 0x40000010	; NEW to this demo - Vertical Scroll RAM address
00020170                            
00020170                            ; VDP memory addresses
00020170                            ; according to VDP registers 0x2, 0x4, and 0xD (see table above)
00020170 =00000000                  vram_addr_tiles			equ 0x0000
00020170 =0000C000                  vram_addr_plane_a		equ 0xC000
00020170 =0000E000                  vram_addr_plane_b		equ 0xE000
00020170                            
00020170                            ; Screen width and height (in pixels)
00020170 =00000140                  vdp_screen_width		equ 0x0140
00020170 =000000F0                  vdp_screen_height		equ 0x00F0
00020170                            
00020170                            ; The plane width and height (in tiles)
00020170                            ; according to VDP register 0x10 (see table above)
00020170 =00000040                  vdp_plane_width			equ 0x40
00020170 =00000020                  vdp_plane_height		equ 0x20
00020170                            
00020170                            ; VDP register commands to handle DMA:
00020170 =00009300                  vdpreg_dmalen_l  		equ 0x9300  ; DMA length (low)
00020170 =00009400                  vdpreg_dmalen_h  		equ 0x9400  ; DMA length (high)
00020170 =00009500                  vdpreg_dmasrc_l			equ 0x9500  ; DMA source (low)
00020170 =00009600                  vdpreg_dmasrc_m			equ 0x9600  ; DMA source (mid)
00020170 =00009700                  vdpreg_dmasrc_h			equ 0x9700  ; DMA source (high)
00020170 =40000080                  vram_dma_cmd   			equ 0x40000080
00020170 =C0000080                  cram_dma_cmd  			equ 0xC0000080
00020170 =40000090                  vsram_dma_cmd  			equ 0x40000090
00020170                            
00020170                            ; Hardware version address
00020170 =00A10001                  hardware_ver_address	equ 0x00A10001
00020170                            
00020170                            ; TMSS
00020170 =00A14000                  tmss_address			equ 0x00A14000
00020170 =53454741                  tmss_signature			equ 'SEGA'
00020170                            
00020170                            ; The size of a word and longword
00020170 =00000002                  size_word				equ 2
00020170 =00000004                  size_long				equ 4
00020170                            
00020170                            ; The size of one palette (in bytes, words, and longwords)
00020170 =00000020                  size_palette_b			equ 0x20
00020170 =00000010                  size_palette_w			equ size_palette_b/size_word
00020170 =00000008                  size_palette_l			equ size_palette_b/size_long
00020170                            
00020170                            ; The size of one graphics tile (in bytes, words, and longwords)
00020170 =00000020                  size_tile_b				equ 0x20
00020170 =00000010                  size_tile_w				equ size_tile_b/size_word
00020170 =00000008                  size_tile_l				equ size_tile_b/size_long
00020170                            
00020170                            ; Text draw position (in tiles)
00020170 =00000008                  text_pos_x				equ 0x08
00020170 =00000010                  text_pos_y				equ 0x10
00020170                            
00020170                            ; Speed (in pixels per frame) to move our scroll planes
00020170 =00000002                  plane_a_scroll_speed_x	equ 0x2
00020170 =00000001                  plane_b_scroll_speed_y	equ 0x1
00020170                            
00020170                            ;*********
00020170                            ; PALETTE
00020170                            ;*********
00020170                            ; A single colour palette (16 colours) we'll be using to draw text.
00020170                            ; Colour #0 is always transparent, no matter what colour value
00020170                            ; you specify.
00020170                            ;==============================================================
00020170                            ; Each colour is in binary format 0000 BBB0 GGG0 RRR0,
00020170                            ; so 0x0000 is black, 0x0EEE is white (NOT 0x0FFF, since the
00020170                            ; bottom bit is discarded), 0x000E is red, 0x00E0 is green, and
00020170                            ; 0x0E00 is blue.
00020170                            ;
00020170                            ; For this sample we cycle through a list of some of these,
00020170                            ; they're repeated through it, but I'm not really good at
00020170                            ; deciding colors anyway :'D.
00020170                            ;==============================================================
00020170                            Palette:
00020170 0000                       	dc.w 0x0000	; Colour 0 = Transparent
00020172 0000                       	dc.w 0x0000	; Colour 1 = Black
00020174 0EEE                       	dc.w 0x0EEE	; Colour 2 = White
00020176 000E                       	dc.w 0x000E	; Colour 3 = Red
00020178 00E0                       	dc.w 0x00E0	; Colour 4 = Blue
0002017A 0E00                       	dc.w 0x0E00	; Colour 5 = Green
0002017C 0E0E                       	dc.w 0x0E0E	; Colour 6 = Pink
0002017E 0000                       	dc.w 0x0000	; Colour 7 = Black
00020180 0EEE                       	dc.w 0x0EEE	; Colour 8 = White
00020182 000E                       	dc.w 0x000E	; Colour 9 = Red
00020184 00E0                       	dc.w 0x00E0	; Colour 10 = Blue
00020186 0E00                       	dc.w 0x0E00	; Colour 11 = Green
00020188 0E0E                       	dc.w 0x0E0E	; Colour 12 = Pink
0002018A 000E                       	dc.w 0x000E	; Colour 13 = Red
0002018C 00E0                       	dc.w 0x00E0	; Colour 14 = Blue
0002018E 0E00                       	dc.w 0x0E00	; Colour 15 = Green
0002018E 0E00                       	dc.w 0x0E00	; Colour 15 = Green
00020190                            	include 'text.asm'			; Text drawing routines
00020190                            	include 'charmap.asm'
00020190 =00000020                  ASCIIStart: equ 0x20 ; First ASCII code in table
00020190                            
00020190                            ASCIIMap:
00020190 00                         	dc.b 0x00	; SPACE (ASCII code 0x20)
00020191 28                         	dc.b 0x28   ; ! Exclamation mark
00020192 2B                         	dc.b 0x2B   ; " Double quotes
00020193 2E                         	dc.b 0x2E   ; # Hash
00020194 00                         	dc.b 0x00	; UNUSED
00020195 00                         	dc.b 0x00	; UNUSED
00020196 00                         	dc.b 0x00	; UNUSED
00020197 2C                         	dc.b 0x2C   ; ' Single quote
00020198 29                         	dc.b 0x29   ; ( Open parenthesis
00020199 2A                         	dc.b 0x2A   ; ) Close parenthesis
0002019A 00                         	dc.b 0x00	; UNUSED
0002019B 2F                         	dc.b 0x2F   ; + Plus
0002019C 26                         	dc.b 0x26   ; , Comma
0002019D 30                         	dc.b 0x30   ; - Minus
0002019E 25                         	dc.b 0x25   ; . Full stop
0002019F 31                         	dc.b 0x31   ; / Slash or divide
000201A0 1B                         	dc.b 0x1B   ; 0 Zero
000201A1 1C                         	dc.b 0x1C   ; 1 One
000201A2 1D                         	dc.b 0x1D   ; 2 Two
000201A3 1E                         	dc.b 0x1E   ; 3 Three
000201A4 1F                         	dc.b 0x1F   ; 4 Four
000201A5 20                         	dc.b 0x20   ; 5 Five
000201A6 21                         	dc.b 0x21   ; 6 Six
000201A7 22                         	dc.b 0x22   ; 7 Seven
000201A8 23                         	dc.b 0x23   ; 8 Eight
000201A9 24                         	dc.b 0x24   ; 9 Nine
000201AA 2D                         	dc.b 0x2D   ; : Colon
000201AB 00                         	dc.b 0x00	; UNUSED
000201AC 00                         	dc.b 0x00	; UNUSED
000201AD 00                         	dc.b 0x00	; UNUSED
000201AE 00                         	dc.b 0x00	; UNUSED
000201AF 27                         	dc.b 0x27   ; ? Question mark
000201B0 00                         	dc.b 0x00	; UNUSED
000201B1 01                         	dc.b 0x01	; A
000201B2 02                         	dc.b 0x02   ; B
000201B3 03                         	dc.b 0x03	; C
000201B4 04                         	dc.b 0x04   ; D
000201B5 05                         	dc.b 0x05	; E
000201B6 06                         	dc.b 0x06	; F
000201B7 07                         	dc.b 0x07	; G
000201B8 08                         	dc.b 0x08	; H
000201B9 09                         	dc.b 0x09	; I
000201BA 0A                         	dc.b 0x0A	; J
000201BB 0B                         	dc.b 0x0B	; K
000201BC 0C                         	dc.b 0x0C	; L
000201BD 0D                         	dc.b 0x0D	; M
000201BE 0E                         	dc.b 0x0E	; N
000201BF 0F                         	dc.b 0x0F	; O
000201C0 10                         	dc.b 0x10	; P
000201C1 11                         	dc.b 0x11	; Q
000201C2 12                         	dc.b 0x12	; R
000201C3 13                         	dc.b 0x13	; S
000201C4 14                         	dc.b 0x14	; T
000201C5 15                         	dc.b 0x15	; U
000201C6 16                         	dc.b 0x16	; V
000201C7 17                         	dc.b 0x17	; W
000201C8 18                         	dc.b 0x18	; X
000201C9 19                         	dc.b 0x19	; Y
000201CA 1A                         	dc.b 0x1A	; Z (ASCII code 0x5A)
000201CB                            
000201CB =0000003A                  text_tile_count    equ 0x3A
000201CB =0000003A                  text_tile_count    equ 0x3A
000201CB                            
000201CB                            	; Align 8 bytes
000201CC 004E 71                    	nop 0,8
000201CE                            
000201CE                            DrawText:
000201CE                                ; d0 (w) - First tile ID of font
000201CE                                ; a0 (l) - String address
000201CE                                ; requires previously setting text position through: SetVRAMWrite vram_addr_plane_a+(((text_pos_y*vdp_plane_width)+text_pos_x)*size_word)
000201CE                            
000201CE 43F9 0002 0190             	lea ASCIIMap, a1           	; Load address of ASCII map into a1
000201D4 4282                       	clr.l 	d2
000201D6 4283                       	clr.l 	d3
000201D8                            @CharLookup:
000201D8 1418                       	move.b   (a0)+, d2              ; Move ASCII byte to lower byte of d2
000201DA 0C02 0000                  	cmp.b    #0x0, d2               ; Test if byte is zero (string terminator)
000201DE 6700                       	beq.b    @CharEnd               ; If byte was zero, branch to end
000201E0                            
000201E0 0402 0020                  	sub.b    #ASCIIStart, d2        ; Subtract first ASCII code to get table entry index
000201E4 1631 2000                  	move.b  (a1,d2.w), d3           ; Move tile ID from table (index in lower word of d2) to lower byte of d3
000201E8 33C3 00C0 0000             	move.w 	d3, vdp_data			; draw letter
000201EE 6000 FFE8                  	bra @CharLookup
000201F2                            @CharEnd:
000201F2 4E75                       	rts
000201F4                            
000201F4                            DrawNumber:
000201F4                            	; d4 (w) - Number
000201F4                            	; d0 (w) - First tile ID of font
000201F4                            	; requires previously setting text position through: SetVRAMWrite vram_addr_plane_a+(((text_pos_y*vdp_plane_width)+text_pos_x)*size_word)
000201F4                            
000201F4 4282                       	clr.l 	d2
000201F6 4283                       	clr.l 	d3
000201F8 4285                       	clr.l 	d5
000201FA 4286                       	clr.l 	d6
000201FC 3C3C 000C                  	move.w 	 #12, d6					; number of shifts to apply to the original number, we start with the bigger figure	
00020200 43F9 0002 0190             	lea      ASCIIMap, a1           ; Load address of ASCII map into a1
00020206                            
00020206                            @number_calculation_loop:
00020206 3A04                       	move.w 	d4, d5					; Copy original number
00020208 EC6D                       	lsr.w 	d6, d5					; Shift figure and mask it to draw
0002020A 0245 000F                  	and.w 	#0xF, d5
0002020E                            	
0002020E 0C05 000A                  	cmp.b #10, d5		; check if number is bigger than 9
00020212 6C00 0000                  	bge @bigger_num
00020216                            @small_num:	
00020216 0645 0010                  	add.w #16, d5		; get char for this number
0002021A 6000 0000                  	bra @draw_num
0002021E                            @bigger_num:
0002021E 0645 0017                  	add.w #23, d5
00020222                            @draw_num 
00020222 1631 5000                  	move.b   (a1,d5.w), d3          ; Move tile ID from table (index in lower word of d2) to lower byte of d3
00020226 33C3 00C0 0000             	move.w   d3, vdp_data           ; Move palette and pattern IDs to VDP data port
0002022C                            
0002022C 5946                       	subq #4, d6
0002022E 6B00 0000                  	bmi @end
00020232 6000 FFD2                  	bra @number_calculation_loop
00020236                            @end:
00020236 4E75                       	rts
00020236 4E75                       	rts
00020238                            	include 'pixelfont.asm'		; Font
00020238                            	; Align 8 bytes
00020238 4E71                       	nop 0,8
0002023A                            
0002023A                            PixelFont: ; Font start address
0002023A                            
0002023A 0000 0000                  	dc.l	$00000000
0002023E 0000 0000                  	dc.l	$00000000
00020242 0000 0000                  	dc.l	$00000000
00020246 0000 0000                  	dc.l	$00000000
0002024A 0000 0000                  	dc.l	$00000000
0002024E 0000 0000                  	dc.l	$00000000
00020252 0000 0000                  	dc.l	$00000000
00020256 0000 0000                  	dc.l	$00000000
0002025A                            
0002025A 0222 2200                  	dc.l	$02222200
0002025E 2200 0220                  	dc.l	$22000220
00020262 2022 2020                  	dc.l	$20222020
00020266 2000 0020                  	dc.l	$20000020
0002026A 2022 2020                  	dc.l	$20222020
0002026E 2020 2020                  	dc.l	$20202020
00020272 2220 2220                  	dc.l	$22202220
00020276 0000 0000                  	dc.l	$00000000
0002027A                            	
0002027A 2222 2200                  	dc.l	$22222200
0002027E 2000 0220                  	dc.l	$20000220
00020282 2022 2020                  	dc.l	$20222020
00020286 2000 0220                  	dc.l	$20000220
0002028A 2022 2020                  	dc.l	$20222020
0002028E 2000 0220                  	dc.l	$20000220
00020292 2222 2200                  	dc.l	$22222200
00020296 0000 0000                  	dc.l	$00000000
0002029A                            	
0002029A 0222 2220                  	dc.l	$02222220
0002029E 2200 0020                  	dc.l	$22000020
000202A2 2022 2220                  	dc.l	$20222220
000202A6 2020 0000                  	dc.l	$20200000
000202AA 2022 2220                  	dc.l	$20222220
000202AE 2200 0020                  	dc.l	$22000020
000202B2 0222 2220                  	dc.l	$02222220
000202B6 0000 0000                  	dc.l	$00000000
000202BA                            	
000202BA 2222 2200                  	dc.l	$22222200
000202BE 2000 0220                  	dc.l	$20000220
000202C2 2022 2020                  	dc.l	$20222020
000202C6 2020 2020                  	dc.l	$20202020
000202CA 2022 2020                  	dc.l	$20222020
000202CE 2000 0220                  	dc.l	$20000220
000202D2 2222 2200                  	dc.l	$22222200
000202D6 0000 0000                  	dc.l	$00000000
000202DA                            	
000202DA 2222 2220                  	dc.l	$22222220
000202DE 2000 0020                  	dc.l	$20000020
000202E2 2022 2220                  	dc.l	$20222220
000202E6 2000 2000                  	dc.l	$20002000
000202EA 2022 2220                  	dc.l	$20222220
000202EE 2000 0020                  	dc.l	$20000020
000202F2 2222 2220                  	dc.l	$22222220
000202F6 0000 0000                  	dc.l	$00000000
000202FA                            	
000202FA 2222 2220                  	dc.l	$22222220
000202FE 2000 0020                  	dc.l	$20000020
00020302 2022 2220                  	dc.l	$20222220
00020306 2000 2000                  	dc.l	$20002000
0002030A 2022 2000                  	dc.l	$20222000
0002030E 2020 0000                  	dc.l	$20200000
00020312 2220 0000                  	dc.l	$22200000
00020316 0000 0000                  	dc.l	$00000000
0002031A                            	
0002031A 0222 2220                  	dc.l	$02222220
0002031E 2200 0020                  	dc.l	$22000020
00020322 2022 2220                  	dc.l	$20222220
00020326 2020 0020                  	dc.l	$20200020
0002032A 2022 2020                  	dc.l	$20222020
0002032E 2200 0020                  	dc.l	$22000020
00020332 0222 2220                  	dc.l	$02222220
00020336 0000 0000                  	dc.l	$00000000
0002033A                            	
0002033A 2220 2220                  	dc.l	$22202220
0002033E 2020 2020                  	dc.l	$20202020
00020342 2022 2020                  	dc.l	$20222020
00020346 2000 0020                  	dc.l	$20000020
0002034A 2022 2020                  	dc.l	$20222020
0002034E 2020 2020                  	dc.l	$20202020
00020352 2220 2220                  	dc.l	$22202220
00020356 0000 0000                  	dc.l	$00000000
0002035A                            	
0002035A 2222 2220                  	dc.l	$22222220
0002035E 2000 0020                  	dc.l	$20000020
00020362 2220 2220                  	dc.l	$22202220
00020366 0020 2000                  	dc.l	$00202000
0002036A 2220 2220                  	dc.l	$22202220
0002036E 2000 0020                  	dc.l	$20000020
00020372 2222 2220                  	dc.l	$22222220
00020376 0000 0000                  	dc.l	$00000000
0002037A                            	
0002037A 0000 2220                  	dc.l	$00002220
0002037E 0000 2020                  	dc.l	$00002020
00020382 0000 2020                  	dc.l	$00002020
00020386 2220 2020                  	dc.l	$22202020
0002038A 2022 2020                  	dc.l	$20222020
0002038E 2200 0220                  	dc.l	$22000220
00020392 0222 2200                  	dc.l	$02222200
00020396 0000 0000                  	dc.l	$00000000
0002039A                            	
0002039A 2220 2220                  	dc.l	$22202220
0002039E 2022 2020                  	dc.l	$20222020
000203A2 2022 0220                  	dc.l	$20220220
000203A6 2000 2200                  	dc.l	$20002200
000203AA 2022 0220                  	dc.l	$20220220
000203AE 2022 2020                  	dc.l	$20222020
000203B2 2220 2220                  	dc.l	$22202220
000203B6 0000 0000                  	dc.l	$00000000
000203BA                            
000203BA 2220 0000                  	dc.l	$22200000
000203BE 2020 0000                  	dc.l	$20200000
000203C2 2020 0000                  	dc.l	$20200000
000203C6 2020 0000                  	dc.l	$20200000
000203CA 2022 2220                  	dc.l	$20222220
000203CE 2000 0020                  	dc.l	$20000020
000203D2 2222 2220                  	dc.l	$22222220
000203D6 0000 0000                  	dc.l	$00000000
000203DA                            	
000203DA 2220 2220                  	dc.l	$22202220
000203DE 2022 2020                  	dc.l	$20222020
000203E2 2002 0020                  	dc.l	$20020020
000203E6 2020 2020                  	dc.l	$20202020
000203EA 2022 2020                  	dc.l	$20222020
000203EE 2020 2020                  	dc.l	$20202020
000203F2 2220 2220                  	dc.l	$22202220
000203F6 0000 0000                  	dc.l	$00000000
000203FA                            	
000203FA 2220 2220                  	dc.l	$22202220
000203FE 2022 2020                  	dc.l	$20222020
00020402 2002 2020                  	dc.l	$20022020
00020406 2020 2020                  	dc.l	$20202020
0002040A 2022 0020                  	dc.l	$20220020
0002040E 2022 2020                  	dc.l	$20222020
00020412 2220 2220                  	dc.l	$22202220
00020416 0000 0000                  	dc.l	$00000000
0002041A                            	
0002041A 0222 2200                  	dc.l	$02222200
0002041E 2200 0220                  	dc.l	$22000220
00020422 2022 2020                  	dc.l	$20222020
00020426 2020 2020                  	dc.l	$20202020
0002042A 2022 2020                  	dc.l	$20222020
0002042E 2200 0220                  	dc.l	$22000220
00020432 0222 2200                  	dc.l	$02222200
00020436 0000 0000                  	dc.l	$00000000
0002043A                            	
0002043A 2222 2200                  	dc.l	$22222200
0002043E 2000 0220                  	dc.l	$20000220
00020442 2022 2020                  	dc.l	$20222020
00020446 2000 0220                  	dc.l	$20000220
0002044A 2022 2200                  	dc.l	$20222200
0002044E 2020 0000                  	dc.l	$20200000
00020452 2220 0000                  	dc.l	$22200000
00020456 0000 0000                  	dc.l	$00000000
0002045A                            	
0002045A 0222 2200                  	dc.l	$02222200
0002045E 2200 0220                  	dc.l	$22000220
00020462 2022 2020                  	dc.l	$20222020
00020466 2020 2020                  	dc.l	$20202020
0002046A 2022 0220                  	dc.l	$20220220
0002046E 2200 2020                  	dc.l	$22002020
00020472 0222 2220                  	dc.l	$02222220
00020476 0000 0000                  	dc.l	$00000000
0002047A                            	
0002047A 2222 2200                  	dc.l	$22222200
0002047E 2000 0220                  	dc.l	$20000220
00020482 2022 2020                  	dc.l	$20222020
00020486 2000 0220                  	dc.l	$20000220
0002048A 2022 0220                  	dc.l	$20220220
0002048E 2022 2020                  	dc.l	$20222020
00020492 2220 2220                  	dc.l	$22202220
00020496 0000 0000                  	dc.l	$00000000
0002049A                            	
0002049A 0222 2220                  	dc.l	$02222220
0002049E 2200 0020                  	dc.l	$22000020
000204A2 2022 2220                  	dc.l	$20222220
000204A6 2200 0220                  	dc.l	$22000220
000204AA 2222 2020                  	dc.l	$22222020
000204AE 2000 0220                  	dc.l	$20000220
000204B2 2222 2200                  	dc.l	$22222200
000204B6 0000 0000                  	dc.l	$00000000
000204BA                            	
000204BA 2222 2220                  	dc.l	$22222220
000204BE 2000 0020                  	dc.l	$20000020
000204C2 2220 2220                  	dc.l	$22202220
000204C6 0020 2000                  	dc.l	$00202000
000204CA 0020 2000                  	dc.l	$00202000
000204CE 0020 2000                  	dc.l	$00202000
000204D2 0022 2000                  	dc.l	$00222000
000204D6 0000 0000                  	dc.l	$00000000
000204DA                            	
000204DA 2220 2220                  	dc.l	$22202220
000204DE 2020 2020                  	dc.l	$20202020
000204E2 2020 2020                  	dc.l	$20202020
000204E6 2020 2020                  	dc.l	$20202020
000204EA 2022 2020                  	dc.l	$20222020
000204EE 2200 0220                  	dc.l	$22000220
000204F2 0222 2200                  	dc.l	$02222200
000204F6 0000 0000                  	dc.l	$00000000
000204FA                            	
000204FA 2220 2220                  	dc.l	$22202220
000204FE 2020 2020                  	dc.l	$20202020
00020502 2022 2020                  	dc.l	$20222020
00020506 2202 0220                  	dc.l	$22020220
0002050A 0202 0200                  	dc.l	$02020200
0002050E 0220 2200                  	dc.l	$02202200
00020512 0022 2000                  	dc.l	$00222000
00020516 0000 0000                  	dc.l	$00000000
0002051A                            	
0002051A 2220 2220                  	dc.l	$22202220
0002051E 2020 2020                  	dc.l	$20202020
00020522 2022 2020                  	dc.l	$20222020
00020526 2020 2020                  	dc.l	$20202020
0002052A 2002 0020                  	dc.l	$20020020
0002052E 2022 2020                  	dc.l	$20222020
00020532 2220 2220                  	dc.l	$22202220
00020536 0000 0000                  	dc.l	$00000000
0002053A                            	
0002053A 2220 2220                  	dc.l	$22202220
0002053E 2022 2020                  	dc.l	$20222020
00020542 2202 0220                  	dc.l	$22020220
00020546 0220 2200                  	dc.l	$02202200
0002054A 2202 0220                  	dc.l	$22020220
0002054E 2022 2020                  	dc.l	$20222020
00020552 2220 2220                  	dc.l	$22202220
00020556 0000 0000                  	dc.l	$00000000
0002055A                            	
0002055A 2220 2220                  	dc.l	$22202220
0002055E 2022 2020                  	dc.l	$20222020
00020562 2202 0220                  	dc.l	$22020220
00020566 0220 2200                  	dc.l	$02202200
0002056A 0020 2000                  	dc.l	$00202000
0002056E 0020 2000                  	dc.l	$00202000
00020572 0022 2000                  	dc.l	$00222000
00020576 0000 0000                  	dc.l	$00000000
0002057A                            	
0002057A 2222 2220                  	dc.l	$22222220
0002057E 2000 0020                  	dc.l	$20000020
00020582 2222 0220                  	dc.l	$22220220
00020586 0220 2200                  	dc.l	$02202200
0002058A 2202 2220                  	dc.l	$22022220
0002058E 2000 0020                  	dc.l	$20000020
00020592 2222 2220                  	dc.l	$22222220
00020596 0000 0000                  	dc.l	$00000000
0002059A                            	
0002059A 0222 2200                  	dc.l	$02222200
0002059E 2200 0220                  	dc.l	$22000220
000205A2 2022 0020                  	dc.l	$20220020
000205A6 2020 2020                  	dc.l	$20202020
000205AA 2002 2020                  	dc.l	$20022020
000205AE 2200 0220                  	dc.l	$22000220
000205B2 0222 2200                  	dc.l	$02222200
000205B6 0000 0000                  	dc.l	$00000000
000205BA                            	
000205BA 0222 2000                  	dc.l	$02222000
000205BE 0200 2000                  	dc.l	$02002000
000205C2 0220 2000                  	dc.l	$02202000
000205C6 0020 2000                  	dc.l	$00202000
000205CA 0220 2200                  	dc.l	$02202200
000205CE 0200 0200                  	dc.l	$02000200
000205D2 0222 2200                  	dc.l	$02222200
000205D6 0000 0000                  	dc.l	$00000000
000205DA                            	
000205DA 2222 2200                  	dc.l	$22222200
000205DE 2000 0220                  	dc.l	$20000220
000205E2 2222 2020                  	dc.l	$22222020
000205E6 2200 0220                  	dc.l	$22000220
000205EA 2022 2220                  	dc.l	$20222220
000205EE 2000 0020                  	dc.l	$20000020
000205F2 2222 2220                  	dc.l	$22222220
000205F6 0000 0000                  	dc.l	$00000000
000205FA                            	
000205FA 2222 2200                  	dc.l	$22222200
000205FE 2000 0220                  	dc.l	$20000220
00020602 2222 2020                  	dc.l	$22222020
00020606 0020 0220                  	dc.l	$00200220
0002060A 2222 2020                  	dc.l	$22222020
0002060E 2000 0220                  	dc.l	$20000220
00020612 2222 2200                  	dc.l	$22222200
00020616 0000 0000                  	dc.l	$00000000
0002061A                            	
0002061A 2220 2220                  	dc.l	$22202220
0002061E 2020 2020                  	dc.l	$20202020
00020622 2022 2020                  	dc.l	$20222020
00020626 2000 0020                  	dc.l	$20000020
0002062A 2222 2020                  	dc.l	$22222020
0002062E 0000 2020                  	dc.l	$00002020
00020632 0000 2220                  	dc.l	$00002220
00020636 0000 0000                  	dc.l	$00000000
0002063A                            	
0002063A 2222 2220                  	dc.l	$22222220
0002063E 2000 0020                  	dc.l	$20000020
00020642 2022 2220                  	dc.l	$20222220
00020646 2000 0220                  	dc.l	$20000220
0002064A 2222 2020                  	dc.l	$22222020
0002064E 2000 0220                  	dc.l	$20000220
00020652 2222 2200                  	dc.l	$22222200
00020656 0000 0000                  	dc.l	$00000000
0002065A                            	
0002065A 0222 2200                  	dc.l	$02222200
0002065E 2200 0200                  	dc.l	$22000200
00020662 2022 2200                  	dc.l	$20222200
00020666 2000 0220                  	dc.l	$20000220
0002066A 2022 2020                  	dc.l	$20222020
0002066E 2200 0220                  	dc.l	$22000220
00020672 0222 2200                  	dc.l	$02222200
00020676 0000 0000                  	dc.l	$00000000
0002067A                            	
0002067A 2222 2220                  	dc.l	$22222220
0002067E 2000 0020                  	dc.l	$20000020
00020682 2222 2020                  	dc.l	$22222020
00020686 0022 0220                  	dc.l	$00220220
0002068A 0220 2200                  	dc.l	$02202200
0002068E 0202 2000                  	dc.l	$02022000
00020692 0222 0000                  	dc.l	$02220000
00020696 0000 0000                  	dc.l	$00000000
0002069A                            	
0002069A 0222 2200                  	dc.l	$02222200
0002069E 2200 0220                  	dc.l	$22000220
000206A2 2022 2020                  	dc.l	$20222020
000206A6 2200 0220                  	dc.l	$22000220
000206AA 2022 2020                  	dc.l	$20222020
000206AE 2200 0220                  	dc.l	$22000220
000206B2 0222 2200                  	dc.l	$02222200
000206B6 0000 0000                  	dc.l	$00000000
000206BA                            	
000206BA 0222 2200                  	dc.l	$02222200
000206BE 2200 0220                  	dc.l	$22000220
000206C2 2022 2020                  	dc.l	$20222020
000206C6 2200 0020                  	dc.l	$22000020
000206CA 0222 2020                  	dc.l	$02222020
000206CE 0200 0220                  	dc.l	$02000220
000206D2 0222 2200                  	dc.l	$02222200
000206D6 0000 0000                  	dc.l	$00000000
000206DA                            
000206DA 0000 0000                  	dc.l	$00000000
000206DE 0000 0000                  	dc.l	$00000000
000206E2 0000 0000                  	dc.l	$00000000
000206E6 0000 0000                  	dc.l	$00000000
000206EA 0000 0000                  	dc.l	$00000000
000206EE 2200 0000                  	dc.l	$22000000
000206F2 2200 0000                  	dc.l	$22000000
000206F6 0000 0000                  	dc.l	$00000000
000206FA                            	
000206FA 0000 0000                  	dc.l	$00000000
000206FE 0000 0000                  	dc.l	$00000000
00020702 0000 0000                  	dc.l	$00000000
00020706 0000 0000                  	dc.l	$00000000
0002070A 2220 0000                  	dc.l	$22200000
0002070E 2020 0000                  	dc.l	$20200000
00020712 2020 0000                  	dc.l	$20200000
00020716 2220 0000                  	dc.l	$22200000
0002071A                            	
0002071A 0222 2200                  	dc.l	$02222200
0002071E 2200 0220                  	dc.l	$22000220
00020722 2022 2020                  	dc.l	$20222020
00020726 2220 0220                  	dc.l	$22200220
0002072A 0022 2200                  	dc.l	$00222200
0002072E 0020 2000                  	dc.l	$00202000
00020732 0022 2000                  	dc.l	$00222000
00020736 0000 0000                  	dc.l	$00000000
0002073A                            	
0002073A 2220 0000                  	dc.l	$22200000
0002073E 2020 0000                  	dc.l	$20200000
00020742 2020 0000                  	dc.l	$20200000
00020746 2020 0000                  	dc.l	$20200000
0002074A 2220 0000                  	dc.l	$22200000
0002074E 2020 0000                  	dc.l	$20200000
00020752 2220 0000                  	dc.l	$22200000
00020756 0000 0000                  	dc.l	$00000000
0002075A                            	
0002075A 0222 0000                  	dc.l	$02220000
0002075E 2202 0000                  	dc.l	$22020000
00020762 2022 0000                  	dc.l	$20220000
00020766 2020 0000                  	dc.l	$20200000
0002076A 2022 0000                  	dc.l	$20220000
0002076E 2202 0000                  	dc.l	$22020000
00020772 0222 0000                  	dc.l	$02220000
00020776 0000 0000                  	dc.l	$00000000
0002077A                            	
0002077A 2220 0000                  	dc.l	$22200000
0002077E 2022 0000                  	dc.l	$20220000
00020782 2202 0000                  	dc.l	$22020000
00020786 0202 0000                  	dc.l	$02020000
0002078A 2202 0000                  	dc.l	$22020000
0002078E 2022 0000                  	dc.l	$20220000
00020792 2220 0000                  	dc.l	$22200000
00020796 0000 0000                  	dc.l	$00000000
0002079A                            	
0002079A 2222 2000                  	dc.l	$22222000
0002079E 2020 2000                  	dc.l	$20202000
000207A2 2020 2000                  	dc.l	$20202000
000207A6 2222 2000                  	dc.l	$22222000
000207AA 0000 0000                  	dc.l	$00000000
000207AE 0000 0000                  	dc.l	$00000000
000207B2 0000 0000                  	dc.l	$00000000
000207B6 0000 0000                  	dc.l	$00000000
000207BA                            	
000207BA 2220 0000                  	dc.l	$22200000
000207BE 2020 0000                  	dc.l	$20200000
000207C2 2020 0000                  	dc.l	$20200000
000207C6 2220 0000                  	dc.l	$22200000
000207CA 0000 0000                  	dc.l	$00000000
000207CE 0000 0000                  	dc.l	$00000000
000207D2 0000 0000                  	dc.l	$00000000
000207D6 0000 0000                  	dc.l	$00000000
000207DA                            	
000207DA 0000 0000                  	dc.l	$00000000
000207DE 2220 0000                  	dc.l	$22200000
000207E2 2020 0000                  	dc.l	$20200000
000207E6 2220 0000                  	dc.l	$22200000
000207EA 2020 0000                  	dc.l	$20200000
000207EE 2220 0000                  	dc.l	$22200000
000207F2 0000 0000                  	dc.l	$00000000
000207F6 0000 0000                  	dc.l	$00000000
000207FA                            	
000207FA 0222 2200                  	dc.l	$02222200
000207FE 2202 0220                  	dc.l	$22020220
00020802 2000 0020                  	dc.l	$20000020
00020806 2202 0220                  	dc.l	$22020220
0002080A 2000 0020                  	dc.l	$20000020
0002080E 2202 0220                  	dc.l	$22020220
00020812 0222 2200                  	dc.l	$02222200
00020816 0000 0000                  	dc.l	$00000000
0002081A                            	
0002081A 0022 2000                  	dc.l	$00222000
0002081E 0020 2000                  	dc.l	$00202000
00020822 2220 2220                  	dc.l	$22202220
00020826 2000 0020                  	dc.l	$20000020
0002082A 2220 2220                  	dc.l	$22202220
0002082E 0020 2000                  	dc.l	$00202000
00020832 0022 2000                  	dc.l	$00222000
00020836 0000 0000                  	dc.l	$00000000
0002083A                            	
0002083A 0000 0000                  	dc.l	$00000000
0002083E 0000 0000                  	dc.l	$00000000
00020842 2222 2220                  	dc.l	$22222220
00020846 2000 0020                  	dc.l	$20000020
0002084A 2222 2220                  	dc.l	$22222220
0002084E 0000 0000                  	dc.l	$00000000
00020852 0000 0000                  	dc.l	$00000000
00020856 0000 0000                  	dc.l	$00000000
0002085A                            	
0002085A 0002 2200                  	dc.l	$00022200
0002085E 0022 0200                  	dc.l	$00220200
00020862 0220 2200                  	dc.l	$02202200
00020866 2202 2000                  	dc.l	$22022000
0002086A 2022 0000                  	dc.l	$20220000
0002086E 2220 0000                  	dc.l	$22200000
00020872 0000 0000                  	dc.l	$00000000
00020876 0000 0000                  	dc.l	$00000000
0002087A                            
0002087A                            PixelFontEnd                                 ; Font end address
0002087A =00000640                  PixelFontSizeB: equ (PixelFontEnd-PixelFont) ; Font size in bytes
0002087A =00000320                  PixelFontSizeW: equ (PixelFontSizeB/2)       ; Font size in words
0002087A =00000190                  PixelFontSizeL: equ (PixelFontSizeB/4)       ; Font size in longs
0002087A =00000032                  PixelFontSizeT: equ (PixelFontSizeB/32)      ; Font size in tiles
0002087A =00000000                  PixelFontVRAM:  equ 0x0000                   ; Dest address in VRAM
0002087A =00000000                  PixelFontTileID: equ (PixelFontVRAM/32)      ; ID of first tile
0002087A =00000000                  PixelFontTileID: equ (PixelFontVRAM/32)      ; ID of first tile
0002087A                            	include 'vdp_utils.asm'		; VDP utils
0002087A                            ;********************************************************************************
0002087A                            ; VDP UTILITY FUNCTIONS
0002087A                            ;********************************************************************************
0002087A                            ; Subroutines to initialise the TMSS, and load all VDP registers
0002087A                            ;********************************************************************************
0002087A                            
0002087A                                ;**************************************************************
0002087A                            	; Clear VRAM (video memory)
0002087A                            	;**************************************************************
0002087A                            VDP_ClearVRAM:
0002087A                            	; Setup the VDP to write to VRAM address 0x0000 (start of VRAM)
0002087A 23FC 4000 0000 00C0 0004   	SetVRAMWrite 0x0000
00020884                            
00020884                            	; Write 0's across all of VRAM
00020884 303C 7FFF                  	move.w #(0x00010000/size_word)-1, d0	; Loop counter = 64kb, in words (-1 for DBRA loop)
00020888                            	@ClrVramLp:								; Start of loop
00020888 33FC 0000 00C0 0000        	move.w #0x0, vdp_data					; Write a 0x0000 (word size) to VRAM
00020890 51C8 FFF6                  	dbra   d0, @ClrVramLp					; Decrement d0 and loop until finished (when d0 reaches -1)
00020894                            
00020894 4E75                           rts
00020896                            
00020896                                ;**************************************************************
00020896                            	; Write the palette to CRAM (colour memory)
00020896                            	;**************************************************************
00020896                            VDP_ClearCRAM:
00020896                            	; Setup the VDP to write to CRAM address 0x0000 (first palette)
00020896 23FC C000 0000 00C0 0004   	SetCRAMWrite 0x0000
000208A0                            	
000208A0                            	; Write the palette to CRAM
000208A0 41F9 0002 0170             	lea    Palette, a0				; Move palette address to a0
000208A6 303C 000F                  	move.w #size_palette_w-1, d0	; Loop counter = 8 words in palette (-1 for DBRA loop)
000208AA                            	@PalLp:							; Start of loop
000208AA 33D8 00C0 0000             	move.w (a0)+, vdp_data			; Write palette entry, post-increment address
000208B0 51C8 FFF8                  	dbra d0, @PalLp					; Decrement d0 and loop until finished (when d0 reaches -1)
000208B4                            
000208B4 4E75                           rts
000208B6                            
000208B6                            	;**************************************************************
000208B6                            	; TMSS handling
000208B6                            	;**************************************************************
000208B6                            VDP_WriteTMSS:
000208B6                            
000208B6                            	; The TMSS (Trademark Security System) locks up the VDP if we don't
000208B6                            	; write the string 'SEGA' to a special address. This was to discourage
000208B6                            	; unlicensed developers, since doing this displays the "LICENSED BY SEGA
000208B6                            	; ENTERPRISES LTD" message to screen (on Mega Drive models 1 and higher).
000208B6                            	;
000208B6                            	; First, we need to check if we're running on a model 1+, then write
000208B6                            	; 'SEGA' to hardware address 0xA14000.
000208B6                            
000208B6 1039 00A1 0001             	move.b hardware_ver_address, d0			; Move Megadrive hardware version to d0
000208BC 0200 000F                  	andi.b #0x0F, d0						; The version is stored in last four bits, so mask it with 0F
000208C0 6700 0000                  	beq    @SkipTMSS						; If version is equal to 0, skip TMSS signature
000208C4 23FC 5345 4741 00A1 4000   	move.l #tmss_signature, tmss_address	; Move the string "SEGA" to 0xA14000
000208CE                            	@SkipTMSS:
000208CE                            
000208CE                            	; Check VDP
000208CE 3039 00C0 0004             	move.w vdp_control, d0					; Read VDP status register (hangs if no access)
000208D4                            	
000208D4 4E75                       	rts
000208D6                            
000208D6                            	;**************************************************************
000208D6                            	; Initialising the VDP
000208D6                            	;**************************************************************
000208D6                            VDP_LoadRegisters:
000208D6                            	; To initialise the VDP, we write all of its initial register values from
000208D6                            	; the table at the top of the file, using a loop.
000208D6                            	;
000208D6                            	; To write a register, we write a word to the control port.
000208D6                            	; The top bit must be set to 1 (so 0x8000), bits 8-12 specify the register
000208D6                            	; number to write to, and the bottom byte is the value to set.
000208D6                            	;
000208D6                            	; In binary:
000208D6                            	;   100X XXXX YYYY YYYY
000208D6                            	;   X = register number
000208D6                            	;   Y = value to write
000208D6                            
000208D6                            	; Set VDP registers
000208D6 41F9 0002 0158             	lea    VDPRegisters, a0		; Load address of register table into a0
000208DC 303C 0017                  	move.w #0x18-1, d0			; 24 registers to write (-1 for loop counter)
000208E0 323C 8000                  	move.w #0x8000, d1			; 'Set register 0' command to d1
000208E4                            
000208E4                            	@CopyRegLp:
000208E4 1218                       	move.b (a0)+, d1			; Move register value from table to lower byte of d1 (and post-increment the table address for next time)
000208E6 33C1 00C0 0004             	move.w d1, vdp_control		; Write command and value to VDP control port
000208EC 0641 0100                  	addi.w #0x0100, d1			; Increment register #
000208F0 51C8 FFF2                  	dbra   d0, @CopyRegLp		; Decrement d0, and jump back to top of loop if d0 is still >= 0
000208F4                            	
000208F4 4E75                       	rts
000208F6                            
000208F6                            	;**************************************************************
000208F6                            	; Initialise status register and set interrupt level.
000208F6                            	; This begins firing vertical and horizontal interrupts.
000208F6                            	;
000208F6                            	; Since the vinterrupt does something meaningful in this
000208F6                            	; demo, we start this AFTER setting up the VDP to draw and
000208F6                            	; intialising the variables in RAM.
000208F6                            	;**************************************************************
000208F6                            
000208F6                            VDP_InitStatusRegister:
000208F6 46FC 2300                  	move.w #0x2300, sr
000208FA                            
000208FA 4E75                       	rts
000208FA 4E75                       	rts
000208FC                            	include 'svp.asm'			; SVP comms
000208FC                            ;****************************************************************************************
000208FC                            ; SVP ACCESS CODE
000208FC                            ;****************************************************************************************
000208FC                            ; This part of the source offer the main routines we use to
000208FC                            ; submit the drawing command to the SVP, as well as preparing
000208FC                            ; data so that the generated tiles can be displayed correctly.
000208FC                            ;****************************************************************************************
000208FC                            
000208FC                            ;****************************************************************************************
000208FC                            ; External registers
000208FC                            ;****************************************************************************************
000208FC                            ; The DSP contained inside the SVP chip has 7 external registers that can
000208FC                            ; be used as a normal register in SVP code, but they're external (duh) to
000208FC                            ; the DSP and can be accessed by the Mega Drive/Genesis side. We'll use the
000208FC                            ; following ones:
000208FC                            ;
000208FC                            ; - XST: Mega Drive/Genesis can submit words (16 bytes) to the SVP side.
000208FC                            ;        Both sides can write/read from this register (unconfirmed yet: maybe 
000208FC                            ;        the 68000 side can't read what the SVP side writes).
000208FC                            ;        Useful to activate the SVP to perform certain operations.
000208FC                            ;
000208FC                            ; - XST_State: This register allows both sides to check if the other part has
000208FC                            ;              read/written from XST. It contains two main bits:
000208FC                            ;              ???? ???? ???? ??10
000208FC                            ;              
000208FC                            ;              0: active if DSP has written data. And cleared when M68000 reads from it.
000208FC                            ;              1: active if M68000 has written data. Cleared if DSP reads from it.
000208FC                            ;
000208FC                            ; The Mega Drive/Genesis side can access these through memory mappings.
000208FC                            ;****************************************************************************************
000208FC                            
000208FC =00A15000                  regXST          equ 0x00A15000
000208FC =00A15004                  regXSTState     equ 0x00A15004
000208FC =00A15005                  regXSTState_L   equ 0x00A15005
000208FC                            
000208FC                            ;*****************************************
000208FC                            ; Sources/destinations of generated tiles
000208FC                            ;*****************************************
000208FC =00302000                  dramTilesOrigin         equ 0x00302000
000208FC =00001000                  dramTilesSize           equ 0x1000
000208FC =00000A00                  vramTilesDestination    equ 0x0A00
000208FC                            
000208FC                            ;********************************************************************************
000208FC                            ; Setting up tilemap for SVP-generated tiles
000208FC                            ;********************************************************************************
000208FC                            ; SVP-generated tiles will be transferred to VRAM, but for them to be displayed
000208FC                            ; they need to line up with the indices of the following tilemap. It allows them
000208FC                            ; to be shown and to behave as a small 8x8-tile sized framebuffer.
000208FC                            ;********************************************************************************
000208FC                            PrepareTilemapForSVP:
000208FC                                ; This routine writes in VRAM a tilemap that allows SVP data to be displayed
000208FC                                ; as a 8 x 8 tileset in the center of the screen.
000208FC                                ;
000208FC                                ; d0 = offset for tile data
000208FC                                ; a0 = where to write in VRAM
000208FC                            
000208FC 4281                           clr.l d1        ; d1 will contain Y counter
000208FE 3808                           move.w a0, d4   ; d4 to iterate over the different VRAM addresses
00020900                            
00020900                                ; Put the framebuffer a bit more centered before writing to screen
00020900 0644 0220                      add.w #0x220, d4
00020904                            
00020904                            @loop_y:
00020904 4282                           clr.l d2        ; d2 will contain X counter
00020906 0C41 0008                      cmp.w #8, d1    ; are we done?
0002090A 6700 0000                  	beq @end
0002090E 6600 0000                      bne @loop_x
00020912                            @update_row:
00020912 0641 0001                      add.w #1, d1
00020916 0644 0070                      add.w #0x70, d4   ; next row
0002091A                                
0002091A 6000 FFE8                      bra @loop_y
0002091E                            @loop_x:
0002091E 0C42 0008                      cmp.w #8, d2    ; are we done with this row?
00020922 6700 FFEE                      beq @update_row
00020926                            
00020926                                ; Perform VDP write
00020926 2A04                           move.l d4, d5
00020928 0284 0000 FFFF E58C E44C+      SetVramAddrReg d4, vdp_cmd_vram_write
00020940 2805                           move.l d5, d4
00020942 33C0 00C0 0000                 move.w d0, vdp_data
00020948                            
00020948 0642 0001                      add.w #1, d2
0002094C D1FC 0000 0002                 add.l #2, a0                    ; update VRAM address
00020952 0640 0001                      add.w #1, d0                    ; update next tile number
00020956 0684 0000 0002                 add.l #2, d4                    ; update next tile address
0002095C                                
0002095C 6000 FFC0                      bra @loop_x
00020960                            
00020960                            @end:
00020960 4E75                           rts
00020962                            
00020962                            ;********************************************************************************
00020962                            ; Request tile data to the SVP
00020962                            ;********************************************************************************
00020962                            ; This small routine just sends to the XST register the current color index we 
00020962                            ; want for our next set of tiles to be generated by the SVP. The SVP should be
00020962                            ; waiting for this write (by checking on the XST_State register) to start the
00020962                            ; tile generation process.
00020962                            ;********************************************************************************
00020962                            AskSVPForTileData:
00020962                                ; d0 (byte - actually nibble): color to be used for the tiles (0-F)
00020962                            
00020962 0280 0000 000F                 and.l #0xF, d0
00020968 33C0 00A1 5000                 move.w d0, regXST
0002096E                            
0002096E                            @AskSVPEnd
0002096E 4E75                           rts
0002096E 4E75                           rts
00020970                            
00020970                            ; A label defining the end of ROM so we can compute the total size.
00020970                            ROM_End:
