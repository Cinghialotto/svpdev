#***************************************************************
# SVP sample code to generate tiles conforming a framebuffer
#***************************************************************
#
# This side of the sample is code for the DSP contained inside
# the SVP chip. It starts with a loop that waits for commands
# coming from the Mega Drive/Genesis side (through the XST
# external register). Our code just performs one command, so it
# takes the data written in the XST register by the M68000 and
# uses it as a color index to write tiles with.
# 
# At each frame the Mega Drive will be requesting new tiles for
# different colors. This sample is really simple in its results,
# as each tile is equal to the previous, but this shows how to
# generate pixel data that could conform a basic framebuffer
# to be displayed through the Mega Drive/Genesis VDP.
#
#***************************************************************

#***************************************************************
# Memory map
#***************************************************************
#
# DRAM:
#
# 0x181000-0x1807FF: tile data (so far just 8x8x32 = 4096/0x1000 bytes)
#
# Bank memory:
#
# 0x000: current color to use in this frame for the tiles to generate

org 400                 # SVP code always starts at address 0x400 (0x800 in the Mega Drive address space)

init:	                # Clear registers
                        eor a, a
                        ld x, 0000
                        ld y, 0000
                        ld st, 0000

wait_for_megadrive:     
                        ld a, ext0                      # Retrieve data from XST_State register
                        andi 0x2                        # Check if bit 1 is active (MD has written into XST)
                        bra z=1, @wait_for_megadrive    # If not, keep waiting for a command!
                        
                        ld r0, 0                       # Set up bank memory address 0 in register r0
                        ld x, ext3                      # Read color value sent by the Mega Drive/Genesis in XST.
                        ld (r0), x                      # Store color value in bank #0 address 00

memory_access_setup:
                        # Setting up external memory access to write tile data in DRAM.
                        #
                        # The DSP doesn't have direct access to the DRAM in the cartridge, but the SVP
                        # has a memory adapter the DSP can program using its external registers:
                        #
                        # - ext6: used to program the memory adapter. In this case we want to tell it to
                        #         access DRAM address 0x181000 (in word-space, 0x302000 for the M68000),
                        #         and to autoincrement this address after each write operation.

                        # Weird behavior: I was under the impression that auto-increment wasn't active in PMs
                        # until right after the blind write is submitted. But the current emulator behavior
                        # seems to show otherwise: the actual blind write causes an address increment that you
                        # need to take into account when programming the target address.
                        # This is still unconfirmed in hardware but for now let's keep it like this.
                        #
                        # Also note: in a more real example I'd take this setup time to copy the more repetitive
                        # parts of the code (i.e.: rendering routine under `tile_data_loops_setup`) to IRAM, as 
                        # potentially it'll run faster (not having to "fight" with the Mega Drive/Genesis for
                        # access to the ROM). But this being a sample let's keep it simple :).

		        ld ext6, 0FFF		# Load address part1 for 0x181000 (0x180FFF + 1)      
		        ld ext6, 0818		# Load address part2 for 0x181000, auto-increment set to 1
		        ld ext4, -	        # Programming ext4/PM4 for writes

tile_data_loops_setup:
                        ld y, 0x0400           # Tile counter - 64 tiles total x 16 words = 1024/0x400
                        ld a, y

tile_data_gen_outer_loop:
                        # During this loop we're generating the data for half a row in a tile (a word),
                        # that will be stored in DRAM to be later retrieved by the Mega Drive/Genesis.

                        # Please note that this is a really crude way to do things here, we're not discriminating
                        # between coordinates or individual pixels, but it should be enough to get you started
                        # and be able to do something with more control.

                        ld y, a
                        eor a, a
                                                # Load the current color index to write our tiles with:
                        ld a, (r0)              # Prepare first pixel data to be stored
                        andi 0xF
                        mod always, shl         # We shift to the left 4 times to make way for the next pixel data
                        mod always, shl
                        mod always, shl
                        mod always, shl
                        ld x, a
                        ld a, (r0)              # Prepare second pixel data to be stored
                        andi 0xF
                        or a, x                 # Add pixel data in previous step with the current one.
                        mod always, shl         # And the same process is applied for the other two.
                        mod always, shl
                        mod always, shl
                        mod always, shl
                        ld x, a

                        ld a, (r0)              # Prepare third pixel data to be stored
                        andi 0xF           
                        or a, x
                        mod always, shl
                        mod always, shl
                        mod always, shl
                        mod always, shl
                        ld x, a
                        ld a, (r0)              # Prepare fourth pixel data to be stored
                        andi 0xF
                        or a, x
                        
                        ld ext4, a              # Store pixel data in DRAM and increment address

                        eor a, a
                        ld a, y
                        subi 0x1                # Update tile counter and check if we're done here
                        bra z=1, @let_megadrive_know_were_done
                        bra always, @tile_data_gen_outer_loop

let_megadrive_know_were_done:
                        # We generated all pixels for our framebuffer, let Mega Drive/Genesis know
                        # (by writing a random word to the XST register) and go back to our initial wait loop:

                        ld ext3, 0x1010        # Write a warning so the MD can know we're done writing the tile data
                        bra always, @init

